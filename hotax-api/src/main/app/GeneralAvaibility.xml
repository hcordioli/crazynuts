<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:batch="http://www.mulesoft.org/schema/mule/batch" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd">
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="search-dthtx-t4ezol23qkxnqoxqqg6qp4zoam.us-east-1.es.amazonaws.com" port="443"  doc:name="HTTP Request Configuration" connectionIdleTimeout="30000000" protocol="HTTPS" responseTimeout="30000000"/>
    <http:request-config name="HTTP_Request_ConfigurationEAN" host="api.ean.com" port="443" basePath="ean-services" doc:name="HTTP Request Configuration" connectionIdleTimeout="300000" responseTimeout="300000" protocol="HTTPS"/>
    <vm:connector name="VM" validateConnections="true" doc:name="VM"/>
    <asynchronous-processing-strategy name="Asynchronous_Processing_Strategy" maxThreads="50" minThreads="50" doc:name="Asynchronous Processing Strategy"/>
    <file:connector name="File" outputPattern="*.csv" autoDelete="true" streaming="true" validateConnections="true" doc:name="File"/>
    <flow name="post:/regions:api-config">
        <object-to-string-transformer doc:name="Object to String - Content of Ean Regions file"/>
        <splitter expression="#[org.mule.util.StringUtils.split(message.payload, '\n\r')]" doc:name="Splitter - Split by lines" enableCorrelation="NEVER"/>
        <vm:outbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="vmRegions">
            </vm:outbound-endpoint>
        
    </flow>
    <flow name="GeneralAvaibilityFlow" processingStrategy="Asynchronous_Processing_Strategy">
        <vm:inbound-endpoint exchange-pattern="one-way"  doc:name="VM" path="vmRegions"/>
        <expression-transformer expression="#[message.payload.split(';', -1)]" doc:name="Expression - Split fields"/>
        <set-variable variableName="Id" value="#[payload[0]]" doc:name="Variable - Region ID"/>
        <expression-transformer expression="&quot;{\&quot;regionId\&quot; : \&quot;&quot; + payload[0]+ &quot;\&quot; , \&quot;regionType\&quot; : \&quot;&quot; + payload[1]+ &quot;\&quot;,\&quot;regionName\&quot; : \&quot;&quot; + payload[4]+ &quot;\&quot;,\&quot;regionNameLong\&quot; :\&quot;&quot; + payload[5]+ &quot;\&quot;,\&quot;parentRegionId\&quot; : \&quot;&quot; + payload[6]+ &quot;\&quot;,\&quot;parentRegionName\&quot; : \&quot;&quot; + payload[9]+ &quot;\&quot;,\&quot;hits\&quot; : &quot; + payload[10]+ &quot;}&quot;" doc:name="Expression - Json to Insert into ElasticSearch"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <http:request config-ref="HTTP_Request_Configuration" path="regionsrank/region/{id}" method="PUT" doc:name="HTTP - ElasticSearch Put Region index">
            <http:request-builder>
                <http:uri-param paramName="id" value="#[flowVars.id]"/>
            </http:request-builder>
        </http:request>
    </flow>
    <flow name="get:/regions:api-config">
        <set-variable variableName="termo" value="#[message.inboundProperties.'http.query.params'.termo ]" doc:name="Variable - Termo"/>
        <expression-component doc:name="Expression"><![CDATA[payload = "{ \"query\": { \"match_phrase_prefix\": { \"regionNameLong\": \"" + flowVars.termo + "\" } } , \"size\": 10,  \"sort\" : {\"hits\" : { \"order\": \"desc\"}}}";]]></expression-component>
        <http:request config-ref="HTTP_Request_Configuration" path="regionsrank/_search" method="POST" doc:name="HTTP - AWS ElasticSearch - Query">
        </http:request>
        <byte-array-to-string-transformer doc:name="Byte Array to String - Http Content"/>
        <json:object-to-json-transformer doc:name="Object to JSON - Format Content"/>
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object - Generate HashMap"/>
        <set-variable variableName="items" value="#[new java.util.ArrayList()]" doc:name="Variable - Items Collection"/>
        <foreach collection="#[message.payload.hits.hits]" doc:name="For Each">
            <expression-component doc:name="Expression - Extract Source form ElasticSource and Add to Items Collection"><![CDATA[/*payload._source.put("level", "0");
for(int i=0;i<rootMessage.payload.hits.hits.size();i++){
        if(rootMessage.payload.hits.hits[i]._source.regionId == payload._source.parentRegionId){
            //payload._source.level = "1";
            break;
        }
}*/
flowVars.items.add(payload._source);]]></expression-component>
        </foreach>
        <set-payload value="#[flowVars.items]" doc:name="Set Payload - Items Collection"/>
        <json:object-to-json-transformer doc:name="Object to JSON - PescInc Content"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger - Payload"/>
    </flow>
    <flow name="SetSIGParameters">
        <set-variable variableName="sig" value="#[message.inboundProperties.'http.query.params'.apiKey + message.inboundProperties.'http.query.params'.secret]" doc:name="Variable - Sig Content"/>
        <expression-component doc:name="Expression - Sig Generator"><![CDATA[Long timeInSeconds = (System.currentTimeMillis() / 1000);
String accessParms = flowVars.sig + timeInSeconds.toString();
String sigTemp;
java.security.MessageDigest mdx;
mdx = java.security.MessageDigest.getInstance("MD5");
mdx.update(accessParms.getBytes());
sigTemp = String.format("%032x", new BigInteger (1, mdx.digest()));
flowVars.sig = sigTemp;]]></expression-component>
    </flow>
    <flow name="SetDatesParameters">
        <set-session-variable variableName="dateCheckin" value="&quot;&quot;" doc:name="Session Variable - dateCheckin"/>
        <set-session-variable variableName="dateCheckout" value="" doc:name="Session Variable - dateCheckout"/>
        <expression-component doc:name="Expression - DateFormat"><![CDATA[sessionVars.dateCheckin = message.inboundProperties.'http.query.params'.checkin.split("/")[0] + "/" + message.inboundProperties.'http.query.params'.checkin.split("/")[1] + "/" + message.inboundProperties.'http.query.params'.checkin.split("/")[2];
sessionVars.dateCheckout = message.inboundProperties.'http.query.params'.checkout.split("/")[0] + "/" + message.inboundProperties.'http.query.params'.checkout.split("/")[1] + "/" + message.inboundProperties.'http.query.params'.checkout.split("/")[2]]]></expression-component>
    </flow>
    <flow name="SetRoomParameters">
        <set-variable variableName="Rooms" value="&quot;" doc:name="Variable - Rooms"/>
        <expression-component doc:name="Expression - Room Format"><![CDATA[String rooms = "";
if (message.inboundProperties.'http.query.params'.room1 != null){rooms += "&room1=" + message.inboundProperties.'http.query.params'.room1;}
if (message.inboundProperties.'http.query.params'.room2 != null){rooms += "&room2=" + message.inboundProperties.'http.query.params'.room2;}
if (message.inboundProperties.'http.query.params'.room3 != null){rooms += "&room3=" + message.inboundProperties.'http.query.params'.room3;}
if (message.inboundProperties.'http.query.params'.room4 != null){rooms += "&room4=" + message.inboundProperties.'http.query.params'.room4;}
flowVars.Rooms = rooms;
]]></expression-component>
    </flow>
</mule>
